import asyncio
import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN
from texts import texts  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª –µ—Å—Ç—å

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö—É—Ä—Å—ã
courses = ["Python", "LEGO WeDo", "MINDSTORMS", "Arduino"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    name = State()
    age = State()
    course = State()
    phone = State()

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
lang_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
    [InlineKeyboardButton(text="“ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=lang_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data.startswith("lang_"))
async def set_lang(callback, state: FSMContext):
    lang = callback.data.split("_")[1]
    await state.update_data(lang=lang)
    t = texts[lang]

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=t["menu"][0])],
            [KeyboardButton(text=t["menu"][1])],
            [KeyboardButton(text=t["menu"][2])]
        ],
        resize_keyboard=True
    )
    await callback.message.answer(t["start"], reply_markup=kb)
    await callback.answer()

# === FSM –•–ï–ù–î–õ–ï–†–´ ===

@router.message(Form.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    lang = (await state.get_data()).get("lang", "ru")
    await message.answer(texts[lang]["ask_age"])
    await state.set_state(Form.age)

@router.message(Form.age)
async def get_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    lang = (await state.get_data()).get("lang", "ru")
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=c)] for c in courses],
        resize_keyboard=True
    )
    await message.answer(texts[lang]["ask_course"], reply_markup=kb)
    await state.set_state(Form.course)

@router.message(Form.course)
async def get_course(message: Message, state: FSMContext):
    if message.text not in courses:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(course=message.text)
    lang = (await state.get_data()).get("lang", "ru")
    await message.answer(texts[lang]["ask_phone"])
    await state.set_state(Form.phone)

@router.message(Form.phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    lang = data.get("lang", "ru")
    await message.answer(texts[lang]["done"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("zayavki.txt", "a", encoding="utf-8") as file:
        file.write(f"–ò–º—è: {data['name']}\n")
        file.write(f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n")
        file.write(f"–ö—É—Ä—Å: {data['course']}\n")
        file.write(f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n")
        file.write("-" * 30 + "\n")

    print(f"\nüì• –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data}")
    await state.clear()

# === –ú–ï–ù–Æ ===

@router.message()
async def menu_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    t = texts[lang]
    text = message.text.strip()

    if text == t["menu"][0]:  # üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
        await message.answer(t["ask_name"])
        await state.set_state(Form.name)

    elif text == t["menu"][1]:  # üìö –ö—É—Ä—Å—ã
        await message.answer("üìö –ö—É—Ä—Å—Ç–∞—Ä:\n" + "\n".join(courses))

    elif text == t["menu"][2]:  # ‚ùì –í–æ–ø—Ä–æ—Å—ã
        await message.answer(t["faq"])

    else:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")

# === –ó–∞–ø—É—Å–∫ ===

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
