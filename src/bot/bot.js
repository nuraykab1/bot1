import TelegramBot from 'node-telegram-bot-api';
import { StudentService } from '../services/studentService.js';
import { CourseService } from '../services/courseService.js';
import { PaymentService } from '../services/paymentService.js';
import { logActivity } from '../services/crmService.js';
import { texts } from './texts.js';
import dotenv from 'dotenv';

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

export const bot = new TelegramBot(token, { polling: true });

// User sessions storage
const userSessions = new Map();

// Session states
const STATES = {
  LANGUAGE_SELECTION: 'language_selection',
  MAIN_MENU: 'main_menu',
  REGISTRATION_NAME: 'registration_name',
  REGISTRATION_AGE: 'registration_age',
  REGISTRATION_PHONE: 'registration_phone',
  COURSE_SELECTION: 'course_selection',
  PAYMENT_PROCESSING: 'payment_processing'
};

// Initialize user session
function initSession(chatId) {
  if (!userSessions.has(chatId)) {
    userSessions.set(chatId, {
      state: STATES.LANGUAGE_SELECTION,
      language: 'ru',
      registrationData: {}
    });
  }
  return userSessions.get(chatId);
}

// Language selection keyboard
const languageKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
      [{ text: '“ö–∞–∑–∞“õ—à–∞', callback_data: 'lang_kz' }]
    ]
  }
};

// Main menu keyboard
function getMainMenuKeyboard(language) {
  const t = texts[language];
  return {
    reply_markup: {
      keyboard: [
        [{ text: t.menu[0] }], // Register
        [{ text: t.menu[1] }], // Courses
        [{ text: t.menu[2] }], // FAQ
        [{ text: 'üí≥ –ú–æ–∏ –∫—É—Ä—Å—ã / –ú–µ–Ω—ñ“£ –∫—É—Ä—Å—Ç–∞—Ä—ã–º' }]
      ],
      resize_keyboard: true
    }
  };
}

// Course selection keyboard
async function getCourseKeyboard() {
  const result = await CourseService.getActiveCourses();
  if (!result.success) return null;

  const keyboard = result.courses.map(course => [{ text: course.name }]);
  keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ / –ê—Ä—Ç“õ–∞' }]);

  return {
    reply_markup: {
      keyboard,
      resize_keyboard: true
    }
  };
}

// Start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const session = initSession(chatId);
  
  await bot.sendMessage(chatId, 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:', languageKeyboard);
});

// Language selection
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const session = initSession(chatId);

  if (data.startsWith('lang_')) {
    const language = data.split('_')[1];
    session.language = language;
    session.state = STATES.MAIN_MENU;
    
    const t = texts[language];
    await bot.sendMessage(chatId, t.start, getMainMenuKeyboard(language));
    await bot.answerCallbackQuery(callbackQuery.id);
  }
});

// Message handler
bot.on('message', async (msg) => {
  if (msg.text?.startsWith('/')) return; // Skip commands

  const chatId = msg.chat.id;
  const session = initSession(chatId);
  const t = texts[session.language];
  const messageText = msg.text?.trim();

  try {
    switch (session.state) {
      case STATES.MAIN_MENU:
        await handleMainMenu(chatId, messageText, session, t);
        break;

      case STATES.REGISTRATION_NAME:
        session.registrationData.name = messageText;
        session.state = STATES.REGISTRATION_AGE;
        await bot.sendMessage(chatId, t.ask_age);
        break;

      case STATES.REGISTRATION_AGE:
        const age = parseInt(messageText);
        if (isNaN(age) || age < 5 || age > 18) {
          await bot.sendMessage(chatId, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (5-18 –ª–µ—Ç)');
          return;
        }
        session.registrationData.age = age;
        session.state = STATES.REGISTRATION_PHONE;
        await bot.sendMessage(chatId, t.ask_phone);
        break;

      case STATES.REGISTRATION_PHONE:
        session.registrationData.phone = messageText;
        session.state = STATES.COURSE_SELECTION;
        const courseKeyboard = await getCourseKeyboard();
        await bot.sendMessage(chatId, t.ask_course, courseKeyboard);
        break;

      case STATES.COURSE_SELECTION:
        await handleCourseSelection(chatId, messageText, session, t);
        break;

      default:
        await bot.sendMessage(chatId, '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.');
    }
  } catch (error) {
    console.error('Bot message handler error:', error);
    await bot.sendMessage(chatId, '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle main menu
async function handleMainMenu(chatId, messageText, session, t) {
  if (messageText === t.menu[0]) { // Register
    session.state = STATES.REGISTRATION_NAME;
    session.registrationData = {};
    await bot.sendMessage(chatId, t.ask_name);
    
  } else if (messageText === t.menu[1]) { // Courses
    const result = await CourseService.getActiveCourses();
    if (result.success) {
      let courseList = 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n';
      result.courses.forEach(course => {
        courseList += `üîπ **${course.name}**\n`;
        courseList += `   ${course.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è'}\n`;
        courseList += `   üí∞ ${course.price.toLocaleString()} ‚Ç∏/–º–µ—Å—è—Ü\n`;
        courseList += `   ‚è± ${course.duration_weeks} –Ω–µ–¥–µ–ª—å\n\n`;
      });
      await bot.sendMessage(chatId, courseList, { parse_mode: 'Markdown' });
    }
    
  } else if (messageText === t.menu[2]) { // FAQ
    await bot.sendMessage(chatId, t.faq);
    
  } else if (messageText === 'üí≥ –ú–æ–∏ –∫—É—Ä—Å—ã / –ú–µ–Ω—ñ“£ –∫—É—Ä—Å—Ç–∞—Ä—ã–º') {
    await handleMyCourses(chatId, session);
  }
}

// Handle course selection
async function handleCourseSelection(chatId, messageText, session, t) {
  if (messageText === 'üîô –ù–∞–∑–∞–¥ / –ê—Ä—Ç“õ–∞') {
    session.state = STATES.MAIN_MENU;
    await bot.sendMessage(chatId, t.start, getMainMenuKeyboard(session.language));
    return;
  }

  // Get course details
  const courseResult = await CourseService.getCourseByName(messageText);
  if (!courseResult.success) {
    await bot.sendMessage(chatId, '‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.');
    return;
  }

  const course = courseResult.course;
  session.registrationData.course = course;

  // Create or update student
  const studentResult = await StudentService.upsertStudent(chatId, {
    name: session.registrationData.name,
    age: session.registrationData.age,
    phone: session.registrationData.phone,
    language: session.language
  });

  if (!studentResult.success) {
    await bot.sendMessage(chatId, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const student = studentResult.student;

  // Create enrollment
  const enrollmentResult = await CourseService.createEnrollment(student.id, course.id);
  if (!enrollmentResult.success) {
    await bot.sendMessage(chatId, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  const enrollment = enrollmentResult.enrollment;

  // Create payment
  const paymentResult = await PaymentService.createPayment(enrollment.id, course.price);
  if (!paymentResult.success) {
    await bot.sendMessage(chatId, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  // Send payment link
  const paymentUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/payment?client_secret=${paymentResult.clientSecret}`;
  
  const paymentMessage = `‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n` +
    `üë§ –ò–º—è: ${student.name}\n` +
    `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${student.age}\n` +
    `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${student.phone}\n` +
    `üìö –ö—É—Ä—Å: ${course.name}\n` +
    `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${course.price.toLocaleString()} ‚Ç∏\n\n` +
    `üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∫—É—Ä—Å –ø–æ —Å—Å—ã–ª–∫–µ:\n${paymentUrl}\n\n` +
    `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.`;

  await bot.sendMessage(chatId, paymentMessage);

  // Reset session
  session.state = STATES.MAIN_MENU;
  session.registrationData = {};
}

// Handle my courses
async function handleMyCourses(chatId, session) {
  const studentResult = await StudentService.getStudentByTelegramId(chatId);
  if (!studentResult.success || !studentResult.student) {
    await bot.sendMessage(chatId, '‚ùó –í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å.');
    return;
  }

  const enrollmentsResult = await CourseService.getStudentEnrollments(studentResult.student.id);
  if (!enrollmentsResult.success || enrollmentsResult.enrollments.length === 0) {
    await bot.sendMessage(chatId, '‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã.');
    return;
  }

  let message = 'üìö –í–∞—à–∏ –∫—É—Ä—Å—ã:\n\n';
  enrollmentsResult.enrollments.forEach((enrollment, index) => {
    const statusEmoji = enrollment.status === 'confirmed' ? '‚úÖ' : 
                       enrollment.status === 'pending' ? '‚è≥' : '‚ùå';
    const paymentEmoji = enrollment.payment_status === 'paid' ? 'üí≥' : 
                        enrollment.payment_status === 'pending' ? '‚è≥' : '‚ùå';
    
    message += `${index + 1}. ${statusEmoji} **${enrollment.courses.name}**\n`;
    message += `   –°—Ç–∞—Ç—É—Å: ${getStatusText(enrollment.status, session.language)}\n`;
    message += `   –û–ø–ª–∞—Ç–∞: ${paymentEmoji} ${getPaymentStatusText(enrollment.payment_status, session.language)}\n`;
    message += `   –ó–∞–ø–∏—Å–∞–Ω: ${new Date(enrollment.enrolled_at).toLocaleDateString()}\n\n`;
  });

  await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
}

// Helper functions
function getStatusText(status, language) {
  const statusTexts = {
    ru: {
      pending: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      confirmed: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      completed: '–ó–∞–≤–µ—Ä—à–µ–Ω',
      cancelled: '–û—Ç–º–µ–Ω–µ–Ω'
    },
    kz: {
      pending: '–†–∞—Å—Ç–∞—É–¥—ã –∫“Ø—Ç—É–¥–µ',
      confirmed: '–†–∞—Å—Ç–∞–ª–¥—ã',
      completed: '–ê—è“õ—Ç–∞–ª–¥—ã',
      cancelled: '–ë–æ–ª–¥—ã—Ä—ã–ª–º–∞–¥—ã'
    }
  };
  return statusTexts[language][status] || status;
}

function getPaymentStatusText(status, language) {
  const statusTexts = {
    ru: {
      pending: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
      paid: '–û–ø–ª–∞—á–µ–Ω–æ',
      failed: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
      refunded: '–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ'
    },
    kz: {
      pending: '–¢”©–ª–µ–º–¥—ñ –∫“Ø—Ç—É–¥–µ',
      paid: '–¢”©–ª–µ–Ω–¥—ñ',
      failed: '–¢”©–ª–µ–º “õ–∞—Ç–µ—Å—ñ',
      refunded: '“ö–∞–π—Ç–∞—Ä—ã–ª–¥—ã'
    }
  };
  return statusTexts[language][status] || status;
}

console.log('ü§ñ Telegram bot initialized');